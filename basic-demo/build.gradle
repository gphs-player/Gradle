/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'lihua' at '18-7-20 下午5:57' with Gradle 2.14.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/

//plugins必须在文件顶部
plugins{
    id "base"
}
apply plugin: 'groovy'
//propetise的修改
description='A trivial Gradle build'
version='1.0'

gradle.taskGraph.whenReady { graph ->
        
        println("taskGraph:"+System.currentTimeMillis())
    }
task zip(type: Zip,group:"Archive",description:"Archive sources in a zip file"){
    println("zip:"+System.currentTimeMillis())
    group 'leo_define'
    description '一个压缩包的任务'
    from "src"
    setArchiveName "basic-demo-1.0.zip"
}

task copy(type:Copy, group:"Custom",description:"Copies sources to the dest directory"){
    group 'leo_define'
    description '从一个路径拷贝到另一个路径'
    from "src"
    into "dest"
}

//  ./gradlew performRelease -PisCI=true
task performRelease{
    doLast{
        if (project.hasProperty("isCI")) {
            println("Performing release actions")
        }else{
            throw new InvalidUserDataException("Cannot perform release outside of CI")
        }
    }
}
task A {
    doLast{
        def content = "ls -al".execute().text.trim()
        println(content)
    }
}
task B(type: Exec){
        println 'Hello from B'
        workingDir '.'
        commandLine 'ls','-1'
}
//1.A必须在B之后执行
//A.mustRunAfter B

//2.A执行之后调用B
// A.finalizedBy B

//
task hello{
  inputs.file("src/myFile.txt")  
  outputs.file ("dest/myFileCopy.txt")
  doFirst{
      println 'task hello doFirst'
  }
}

//Sync与Copy类似，但是会把非Copy过来的文件删除
task syncDepend(type: Sync){
    from 'src'
    into 'dest'
}

//Plugin块
apply plugin: DateAndTimePlugin

dateAndTime {
    timeFormat = 'HH:mm:ss.SSS'
    dateFormat = 'yyyy-MM'
}

// 每一个自定义的Plugin都需要实现Plugin<T>接口
class DateAndTimePlugin implements Plugin<Project> {
    //该接口定义了一个apply()方法，在该方法中，我们可以操作Project，
    //比如向其中加入Task，定义额外的Property等。
    void apply(Project project) {
        project.extensions.create("dateAndTime", DateAndTimePluginExtension)
        //每个Gradle的Project都维护了一个ExtenionContainer，
        //我们可以通过project.extentions进行访问
        //比如读取额外的Property和定义额外的Property等。
        project.task('showTime') << {
            println "Current time is " + new Date().format(project.dateAndTime.timeFormat)
        }

        project.tasks.create('showDate') << {
            println "Current date is " + new Date().format(project.dateAndTime.dateFormat)
        }
    }
}

//向Project中定义了一个名为dateAndTime的extension
//并向其中加入了2个Property，分别为timeFormat和dateFormat
class DateAndTimePluginExtension {
    String timeFormat = "MM/dd/yyyyHH:mm:ss.SSS"
    String dateFormat = "yyyy-MM-dd"
}