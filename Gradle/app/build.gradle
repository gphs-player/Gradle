
apply plugin: 'com.android.application'
//1.引入文件
apply from: '../config.gradle'
apply from: '../plugin.gradle'
//apply plugin: "gradle.site"
//2.独立模块
apply plugin: 'simplePlugin'
//3.独立项目
//apply plugin: 'com.lh.plugin'

//apply plugin: 'com.leo.transform'


android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.leo.gradle"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {

        release {
            storeFile file("../packConfig/proa.jks")
            storePassword "123456"
            keyPassword "123456"
            keyAlias "keya"
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    flavorDimensions "default"
    productFlavors {
        flavorA {
            dimension "default"
            manifestPlaceholders = ["leo-value": "flavorA"]
        }
        flavorB {
            dimension "default"
            manifestPlaceholders = ["leo-value": "flavorB"]
            signingConfig signingConfigs.release
        }


    }


    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        disable
    }


}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation Deps.appCompat
    implementation deps.support_v7
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'

}


project.afterEvaluate {

    //AAR
//    android.libraryVariants.all {
    //APK
    android.applicationVariants.all {
        variant ->
//            println "variant: "+variant.getVariantData().getVariantConfiguration().getManifestPlaceholders().toString()
//            println "variant.getFlavorName(): "+variant.getFlavorName()
            def mergedFlavor = variant.getMergedFlavor()
//            println "variant.productFlavors : " + variant.productFlavors.get(0).name
//            println "variant.buildType.name : " + variant.buildType.name
            //这里配置的优先级比buildType低 比Flavor高，在buildType中配置manifestPlaceholders会替换掉
            mergedFlavor.manifestPlaceholders = ["leo-value": "www.example.com/${variant.versionName}${variant.getFlavorName()}"]
            String variantName = variant.name.capitalize()
//            println("variantName : ${variantName}")
            def processManifestTask = project.tasks.getByName("process${variantName}Manifest")
            processManifestTask.doLast {
                pmt ->
                    println("manifestOutputDirectory : " + manifestOutputDirectory)
                    String manifestPath = "$manifestOutputDirectory/AndroidManifest.xml"
                    println("manifest : ${manifestPath}")
//                    def manifest = file(manifestPath).getText()

//                    println(manifestFile)
            }
            //自己写入
            //outputs是数组，debug release
            variant.outputs.each {
                output ->

                    def manifestFile = "${projectDir}/src/main/AndroidManifest.xml"
                    //AndroidManifest.xml的位置
                    //lb_target_pkgname 需要替换的值
                    def updatedContent = file(manifestFile).getText('UTF-8').replaceAll("niubao-value", "niubao-aaa")
                    file(manifestFile).write(updatedContent, 'UTF-8')
            }
    }
}
task appCreate(group: "leoPackage", description: "组合打包流程", dependsOn: "clean") {
    finalizedBy "assembleDebug"
}

task installAPK(type: Exec, dependsOn: appCreate) {
    workingDir "${buildDir}/outputs/apk/debug"
    commandLine 'adb', 'install', '-r', 'app-debug.apk'
}

task packMultiRelease() {
    tasks.findAll {
        it.name.matches("assemble.*")
    }.forEach {
//        println "packMultiRelease ::"+it.name
    }
}


task installRun(type: Exec, dependsOn: installAPK) {
    commandLine 'adb', 'shell', 'am', 'start', "${android.defaultConfig.applicationId}/.MainActivity"
}

//所有的build.gradle文件分析结束
//afterEvaluate {
//    if (file('grammars').isDirectory()) {
//        println "'grammars' directory found"
//
//        task testGrammars << {
//            println "Running grammar tests"
//        }
//    } else {
//        println "'grammars' directory not found"
//    }
//
//}
task startNpm() {
    doLast {
        exec {
            //启动本地脚本
//            commandLine 'npm', 'start'
        }
        standardOutput = new ByteArrayOutputStream()
        ext.output = {
            return standardOutput.toString()
        }
    }
}

